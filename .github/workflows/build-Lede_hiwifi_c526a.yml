#
#
# 感谢p3terx大神的一键编译脚本
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# <https://github.com/P3TERX/Actions-OpenWrt.git>
#


name: 编译Lede_hiwifi_c526a

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Person to greet'
        required: true
        default: 'build-Lede_hiwifi_c526a'

#CI权限
permissions: write-all

env: 
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  SCKEY: ${{ secrets.SCKEY }}
  GITHUB_RELEASE: https://github.com/yichu77/build-openwrt/releases
  TZ: Asia/Shanghai

jobs: 
  build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    name: 编译 ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [Lede_hiwifi_c526a]  #[Lede_x86_64,Lienol_x86_64,Project_x86_64,L_hiwifi_c526a]

    steps:
    - name: 签入项目
      uses: actions/checkout@main

    - name: 初始化
      run: |
        source "${GITHUB_WORKSPACE}/build/${{matrix.target}}/settings.ini"
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "DIY_P1_SH=${DIY_P1_SH}" >> $GITHUB_ENV
        echo "DIY_P2_SH=${DIY_P2_SH}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR=${UPLOAD_BIN_DIR}" >> $GITHUB_ENV
        echo "UPLOAD_CONFIG=${UPLOAD_CONFIG}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
        echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> $GITHUB_ENV  
        echo "date=$(date "+%Y-%m-%d %H.%M")" >> $GITHUB_ENV
        echo "date1=$(date "+%Y年%m月%d号-%H点%M分")" >> $GITHUB_ENV
        echo "date2=$(date "+%Y%m%d-%H%M")" >> $GITHUB_ENV
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        export WRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
        export WRT_REPO=$(basename $GITHUB_WORKSPACE)
        export WRT_SOURCE=$(echo $REPO_URL | cut -d '/' -f 5-)
        export WRT_TYPE=$(sed -n "1{s/^#//;s/\r$//;p;q}" $GITHUB_WORKSPACE/build/$matrix.target/.config)
        echo "WRT_DATE=$WRT_DATE" >> $GITHUB_ENV
        echo "WRT_REPO=$WRT_REPO" >> $GITHUB_ENV
        echo "WRT_SOURCE=$WRT_SOURCE" >> $GITHUB_ENV
        echo "WRT_TYPE=$WRT_TYPE" >> $GITHUB_ENV

    - name: 清理空间
      uses: endersonmenezes/free-disk-space@main
      with:
        remove_android: true
        remove_dotnet: true
        remove_haskell: true
        remove_tool_cache: true
        remove_swap: true
        remove_packages: "android* azure* clang* dotnet* firefox* ghc* golang* google* libclang* libgl1* \
          lld* llvm* microsoft* mongodb* mono* mysql* nodejs* openjdk* php* postgresql* powershell* snap* temurin* yarn* zulu*"
        remove_packages_one_command: true
        remove_folders: "/etc/apt/sources.list.d* /etc/mono* /etc/mysql* /usr/include/linux/android* /usr/lib/llvm* /usr/lib/mono* \
          /usr/local/lib/android* /usr/local/lib/node_modules* /usr/local/share/chromium* /usr/local/share/powershell* /usr/local/share/vcpkg/ports/azure* \
          /usr/local/share/vcpkg/ports/google* /usr/local/share/vcpkg/ports/libpq/android* /usr/local/share/vcpkg/ports/llvm* /usr/local/share/vcpkg/ports/mysql* \
          /usr/local/share/vcpkg/ports/snap* /usr/share/azure* /usr/share/dotnet* /usr/share/glade* /usr/share/miniconda* /usr/share/php* /usr/share/swift \
          /var/lib/mysql* /var/log/azure*"
        testing: false

    - name: 部署编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(sed -n "1{s/\r$//g;p;q}" $GITHUB_WORKSPACE/Depends.txt)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 克隆OpenWRT源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 加载feeds源、patch补丁及自定义设置
      run: |
        cp -Rf `find ./ -maxdepth 1 -type d ! -path './openwrt' ! -path './'` openwrt
        cd openwrt
        if [ -n "$(ls -A "build/${{matrix.target}}/patches" 2>/dev/null)" ]; then
        (
          find "build/${{matrix.target}}/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p0 --forward" || true
        )
        fi
        if [ -f "build/${{matrix.target}}/$DIY_P1_SH" ]; then
        (
          chmod +x build/${{matrix.target}}/$DIY_P1_SH
          /bin/bash "build/${{matrix.target}}/$DIY_P1_SH"
        )
        fi
        ./scripts/feeds clean
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        if [ -n "$(ls -A "build/${{matrix.target}}/files" 2>/dev/null)" ]; then
         cp -rf build/${{matrix.target}}/files files
        fi
        if [ -n "$(ls -A "build/${{matrix.target}}/diy" 2>/dev/null)" ]; then
         cp -Rf build/${{matrix.target}}/diy/* ./
        fi        
        if [ -f "build/${{matrix.target}}/$DIY_P2_SH" ]; then
        (
          chmod +x build/${{matrix.target}}/$DIY_P2_SH
          /bin/bash "build/${{matrix.target}}/$DIY_P2_SH"
        )
        fi
         mv build/${{matrix.target}}/$CONFIG_FILE .config
        make defconfig
    
    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
   
    - name: 服务器信息
      run: |
        cd openwrt
        echo "======================="
        lscpu | egrep "name|Core|Thread"
        echo "======================="
        df -h
        echo "======================="
        du -h --max-depth=1
        echo "======================="

    - name: 开始编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
    - name: 检查空间使用率
      if: (!cancelled())
      run: df -hT

    - name: 打包固件
      run: |
        cd ./openwrt/ && mkdir ./upload/

        cp -rf ./.config ./upload/Config_${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}.txt

        if [[ $WRT_CFG == 'false' ]]; then
          rm -rf $(find ./bin/targets/ -iregex ".*\(buildinfo\|json\|manifest\|sha256sums\|packages\)$")

          for TYPE in $WRT_TYPE ; do
            for FILE in $(find ./bin/targets/ -type f -iname "*$TYPE*.*") ; do
              EXT=$(basename $FILE | cut -d '.' -f 2-)
              NAME=$(basename $FILE | cut -d '.' -f 1 | grep -io "\($TYPE\).*")
              NEW_FILE="$WRT_SOURCE"_"$NAME"_"$WRT_DATE"."$EXT"
              mv -f $FILE ./upload/$NEW_FILE
            done
          done
        fi

    - name: 发布固件
      uses: softprops/action-gh-release@master
      with:
        tag_name: ${{env.WRT_TARGET}}_${{env.WRT_SOURCE}}_${{env.WRT_DATE}}
        files: ./openwrt/upload/*.*
        body: |
          这是个平台固件包，内含多个设备！
          请注意选择你需要的设备固件！

          源码：${{env.REPO_URL}}
          平台：${{env.matrix.target}}
          设备：${{env.matrix.target}}
          地址：192.168.168.1